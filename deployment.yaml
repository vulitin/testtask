---
# Основной деплоймент
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
  labels:
    app: my-app
spec:
  replicas: 2  # Начальное количество (ночной режим)
  selector:
    matchLabels:
      app: my-app
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: my-app
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - my-app
                topologyKey: "topology.kubernetes.io/zone"
      containers:
        - name: my-app
          image: nginx:latest
          ports:
            - containerPort: 80
          # Настройки проверок с задержкой
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5  # Ждем 5 сек перед проверкой готовности
            periodSeconds: 4
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10  # Даем больше времени на старт
            periodSeconds: 5
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "1000m"
              memory: "128Mi"

---
# Сервис типа LoadBalancer
apiVersion: v1
kind: Service
metadata:
  name: my-app-loadbalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # Для AWS, при необходимости заменить на нужный провайдер
spec:
  type: LoadBalancer
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  externalTrafficPolicy: Local  # Сохраняет исходный IP клиента

---
# Горизонтальный Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-app
  minReplicas: 1  # Минимум ночью
  maxReplicas: 4  # Максимум днем
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

---
# CronHPA для масштабирования по расписанию
apiVersion: autoscaling.alpha.kubernetes.io/v1
kind: CronHorizontalPodAutoscaler
metadata:
  name: my-app-cronhpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-app
  schedules:
    - name: "morning-scale-up"
      schedule: "0 8 * * *"  # В 8:00 утра
      minReplicas: 4          # Базовый дневной уровень
      maxReplicas: 6
    - name: "evening-scale-down"
      schedule: "0 22 * * *"  # В 22:00 вечера
      minReplicas: 1          # Ночной режим
      maxReplicas: 2